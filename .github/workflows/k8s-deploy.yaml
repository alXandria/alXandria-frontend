# This is a workflow to publish the react application to the kubernetes.

name: K8s-Deploy

# Controls when the workflow will run
on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPOSITORY: praetor-frontend
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  app-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Use Node.js 16.15
        uses: actions/setup-node@v2
        with:
          node-version: '16.15'

      - name: Prep for build
        run: |
          touch .env
          echo REACT_APP_RPC_URL=${{ secrets.REACT_APP_RPC_URL }} >> .env
          echo REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL_DEV }} >> .env
          echo REACT_APP_AUTH_URL=${{ secrets.REACT_APP_AUTH_URL_DEV }} >> .env
          yarn install

      - name: Production Build
        run: |
          yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    runs-on: ubuntu-latest
    needs: [app-build]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Deploy to kubernetes
        run: |
          kubectl config set-credentials ${{ secrets.K8S_USER }} --token=${{ secrets.K8S_TOKEN }}
          kubectl config set-cluster ${{ secrets.K8S_CTR }} --insecure-skip-tls-verify=true --server=${{ secrets.K8S_URL }}
          kubectl config set-context ${{ secrets.K8S_CTR }} --user=${{ secrets.K8S_USER }} --cluster=${{ secrets.K8S_CTR }}
          kubectl config use-context ${{ secrets.K8S_CTR }}
          kubectl apply -f ./k8s -n dev
          kubectl set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n dev
